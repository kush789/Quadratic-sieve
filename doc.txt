mp_limb_t get_smoothness_bound(mp_limb_t n)

	This function returns the smoothness B which is to be used in the
	sieve. The numbers will be checked for B smoothness based on this
	value.

	It is calculated as follows:

	B = e ^ ((0.5)*((ln(n))*(ln(ln(n))))^0.5)

mp_limb_t* get_primes(mp_limb_t B, mp_limb_t* num)

	This function returns a pointer to an array of prime numbers lesser
	than or equal to the upper_bound supplied. It uses a cached prime
	table as we know that the upper bound cannot exceed 650, i.e. the 
	maximum smoothness value for a 64 bit integer.

	- B is smoothness_bound calculated by get_smoothness_bound().
	- num gets set to the number of primes in the returned array.

mp_limb_t* get_factor_arr(mp_limb_t n, mp_limb_t prime_arr[], mp_limb_t num, mp_limb_t* fac_count)

	This function returns a pointer to an array of prime numbers whcih
	forms the factor base for further sieving. 

	- n is the number being factored,
	- prime_arr[] is an array of primes which is B smooth where B has been 
	  calculated as per get_smoothness_bound. 
	- num is the number of elements in prime_arr[].
	- fac_count gets set to the number of elements in the returned factor base.

fmpz* get_factor_base(mp_limb_t n, mp_limb_t* factor_base_count)

	Returns the factor base for quadratic sieving of a number n. Makes 
	calls to get_smoothness_bound(), get_primes(), get_factor_arr(). Consists
	of the prime numbers and an additional factor, i,e, -1.

	factor_base_count gets set to the number of elements in the returned
	factor_base;

void get_sieveing_range(mp_limb_t n, mp_limb_t* min, mp_limb_t* max)

	This function sets min and max to the lower and upper bounds of the 
	numbers being sieved.

	- min = sqrt(n) - B
	- max = sqrt(n) + B

	Where B is the smoothness bound for n calculated from get_smoothness_bound()

int** get_relation_matrix(mp_limb_t n, fmpz* factor_base, mp_limb_t factor_base_count,
						  mp_limb_t** B_smooth_numbers, mp_limb_t* numbers_count)

	This function returns a 2D array of relations. Columns are the B smooth numbers, 
	rows are the factors in the factor base given. 

	- n is the number being factored
	- factor_base is the array of factors computed from get_factor_base
	- factor_base_count is the number of elements in factor_base
	- B_smooth_numbers gets allocated and contains B smooth numbers in the range being 
	  computed B is the smoothness bound calculated from ge_smoothness_bound(). range is 
	  computed from get_sieveing_range().
	- numbers_count gets set to the number of elements in the array "numbers" of B
	  smooth numbers.